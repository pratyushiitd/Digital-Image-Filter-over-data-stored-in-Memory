library IEEE;
use IEEE.std_logic_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

--Pre Designed Modules Start

entity RAM_64Kx8 is
 port (
 clock : in std_logic;
 read_enable, write_enable : in std_logic; -- signals that enable read/write operation
 address : in std_logic_vector(15 downto 0); -- 2^16 = 64K
 data_in : in std_logic_vector(7 downto 0);
 data_out : out std_logic_vector(7 downto 0)
 );
end RAM_64Kx8;

entity ROM_32x9 is
 port (
 clock : in std_logic;
 read_enable : in std_logic; -- signal that enables read operation
 address : in std_logic_vector(4 downto 0); -- 2^5 = 32
 data_out : out std_logic_vector(8 downto 0)
 );
end ROM_32x9;

entity MAC is
 port (
 clock : in std_logic;
 control : in std_logic; -- ‘0’ for initializing the sum
 data_in1, data_in2 : in std_logic_vector(17 downto 0);
 data_out : out std_logic_vector(17 downto 0)
 );
end MAC;

architecture Artix of RAM_64Kx8 is
 type Memory_type is array (0 to 65535) of std_logic_vector (7 downto 0);
 signal Memory_array : Memory_type;
begin
 process (clock) begin
 if rising_edge (clock) then
 if (read_enable = '1') then -- the data read is available after the clock edge
 data_out <= Memory_array (to_integer (unsigned (address)));
 end if;
 if (write_enable = '1') then -- the data is written on the clock edge
 Memory_array (to_integer (unsigned(address))) <= data_in;
 end if;
 end if;
 end process;
end Artix;


architecture Artix of ROM_32x9 is
 type Memory_type is array (0 to 31) of std_logic_vector (8 downto 0);
 signal Memory_array : Memory_type;
begin
 process (clock) begin
 if rising_edge (clock) then
 if (read_enable = '1') then -- the data read is available after the clock edge
 data_out <= Memory_array (to_integer (unsigned (address)));
 end if;
 end if;
 end process;
end Artix;


architecture Artix of MAC is
 signal sum, product : signed (17 downto 0);
begin
 data_out <= std_logic_vector (sum);
 product <= signed (data_in1) * signed (data_in2);
 process (clock) begin
 if rising_edge (clock) then -- sum is available after clock edge
 if (control = '0') then -- initialize the sum with the first product
 sum <= std_logic_vector (product);
 else -- add product to the previous sum
 sum <= std_logic_vector (product + signed (sum));
 end if;
 end if;
 end process;
end Artix;

--Pre Designed Modules End


entity filter is
 port(
   push : in std_logic;
   clock : in std_logic;
   switch : in std_logic --0 when smoothen, 1 when sharpen
 );
end filter;


architecture behavior of filter is
 type state_type is (s0, s1, s2, s2_1, s3);
 signal state   : STATE_TYPE; --current state
 signal i : std_logic_vector (4 DOWNTO 0); 		--counter for iterating over 9 pixel values
 signal p : std_logic_vector (15 DOWNTO 0); 		--maintain address of pixels of input image
 signal control : std_logic; 				--passing control arguement to MAC entity
 signal address_in : std_logic_vector(15 DOWNTO 0); 	--input address to be sent to RAM
 signal address1 : std_logic_vector(15 DOWNTO 0); 	--address_in = address1 when reading and address_in = write_address when writing to memory
 signal address2 : std_logic_vector(4 DOWNTO 0); 	--input address for reading from ROM (coefficient matrix)
 signal LdA : std_logic_vector(1 DOWNTO 0); 		--control signal to access different rows of 3x3 matrix of some pixel value and reading from RAM
 signal LdB : std_logic; 				--control signal to read from ROM (coefficient matrix)
 signal r : std_logic_vector (7 DOWNTO 0);  		--counter to maintain the number of pixels iterated in a row (goes from 1 to 158)
 signal q : std_logic_vector (7 DOWNTO 0);		--counter to maintain the number of rows iterated (goes from 1 to 118)
 signal reset_r : std_logic;				--for resetting r to 1
 signal reset_q : std_logic;				--for resetting q to 1
 signal reset_p : std_logic;				--for resetting p to 161
 signal increment_r : std_logic;			--control sign to increment r
 signal increment_q : std_logic;			--control sign to increment q
 signal per_mac : std_logic;				--perform MAC operation
 signal done : std_logic;				--finish the filtering opearation
 signal read_enable : std_logic;
 signal write_enable : std_logic;
 signal write_address : std_logic_vector (15 DOWNTO 0) := "1000000000000000"; --writing address for filtered image (Initialized to 32768)
 signal reg_A : std_logic_vector (7 DOWNTO 0); 		--Register for maintaining pixels read from RAM (of Image)
 signal reg_B : std_logic_vector (8 DOWNTO 0);		--Register for maintaining pixels read from RAM (of Coefficient Matrix)
 signal reg_C : std_logic_vector (17 DOWNTO 0);   	--Register for maintaining pixels to write to RAM (of Filtered Image)

component RAM_64Kx8 is
 port (
 clock : in std_logic;
 read_enable, write_enable : in std_logic; -- signals that enable read/write operation
 address : in std_logic_vector(15 downto 0); -- 2^16 = 64K
 data_in : in std_logic_vector(7 downto 0);
 data_out : out std_logic_vector(7 downto 0)
 );
END component;

component ROM_32x9 is
 port (
 clock : in std_logic;
 read_enable : in std_logic; -- signal that enables read operation
 address : in std_logic_vector(4 downto 0); -- 2^5 = 32
 data_out : out std_logic_vector(8 downto 0)
 );
END component;

component MAC is
 port (
 clock : in std_logic;
 control : in std_logic; -- ‘0’ for initializing the sum
 data_in1, data_in2 : in std_logic_vector(17 downto 0);
 data_out : out std_logic_vector(17 downto 0)
 );
END component;

begin
 Process (clock) 							--State Assignments
 begin
  if rising_edge(clock) then
   case state is
    when s0 =>
     if push = '0' then state <= s1; end if;
    when s1 =>
     if push = '1' then state <= s2; end if;
    when s2 =>
     state <= s2_1;
    when s2_1 =>
     if i = "01000" then state <= s3; else state <= s2;end if;      	--if i=8, go to s3 state for writing pixel values of Filtered Image to RAM
    when s3 =>
     if r = "10011110" then
      if q = "01110110" then state <= s0; else state <= s2; end if;  	-- if r = 158 and q = 118, return to Idle State (S0)
     else state <= s2;
     end if;
   end case;
  end if;
 end Process;

 mult_control_out_proc: process (state, push, i, r, q)
 begin
  reset_r <= '0'; reset_q <= '0'; reset_p <= '0'; control<='0'; per_mac <='0'; LdB <= '0'; LdA <= '00'; read_enable <= '1';
  write_enable <= '0'; increment_r <= '0'; increment_q <= '0'; done <= '0';			--Initialize all control signals to null except read_enable signal
  case state is
   when s1 => 
    if push = '1' then reset_r <= '1'; reset_q <= '1'; reset_p <= '1'; control<= '0'; end if; --to reset r, q, p;
   when s2 =>
    per_mac <= '1';
   when s2_1 =>
    if i /= "01000" then
     control <= '1'; 									--control is assigned to 1 to add remaining 8 elemets to them sum
     LdB <= '1';
     read_enable <= '1';
     write_enable <= '0';
     if i > 5 then LdA <= "01";								--different values of LdA are used to operate on 3 different rows of 3x3 matrix
     else if i > 2 then LdA <= "10"; else LdA <= "11";end if;
    else write_enable <= '1'; read_enable <= '0'; control <= '0';end if;		-- If in state s3 and i=8, write_enable is assigned to 1 and read_enable to 0;

   when s3 =>
    if r /= "10011110" then increment_r <= '1';						--if r is not 158, simply increment r by 1;
    else if r="10011110" AND q /= "01110110" then reset_r <= '1'; increment_q <= '1'; 	--if r = 158 and q != 118 increment q and assign p to p+3 (done in data path) 
    else done <= '1'; end if;								-- if r=158 and q=118 assign done to 1 and return to idle state	
  end case;
 end process;  

 Datapath: process (clock)
 begin
 if rising_edge(clock) then

 if reset_p = '1' then p <= "0000000010100001"; end if;								--reset p to 161 and i to 
 if reset_r = '1' then r<= '1';i<= "00000"; end if;								--Assign i to 0 when incrementing r(done just below) or resetting r 
 if reset_q = '1' then q<= '1'; end if;
 if increment_r = '1' then r <= r + '1';i<= "00000"; end if;		
 if increment_q = '1' then q <= q + '1'; p <= std_logic_vector(unsigned(p) + unsigned("0000000000000010"));end if;

 if LdA = "01" then address1 <= std_logic_vector (unsigned(p) + unsigned(i) + unsigned("10011001"));             --for third row, values read are p + i + 153 (described to design overview)
 else if LdA = "10" then address1 <= std_logic_vector (unsigned(p) + unsigned(i) - unsigned("00000100"); 	 --for middle row, values read are p + i - 4
 else if LdA = "11" then address1 <= std_logic_vector (unsigned(p) + unsigned(i) - unsigned("10100001");end if;	 --for last row, values read are p+i-161
 
 address1 <= resize(unsigned(address1), 16);									 --resizing address to 16 bit vector to give it as input to RAM module
 if LdB = '1' AND switch = '1' then address2 <= std_logic_vector (unsigned(i) + unsigned("10000")); i <= i + '1';--address2 = i when switch is 0 (smoothening) or i + 16 when switch is 1 (sharpening)
 else if LdB = '1' AND switch = '0' then address2 <= i; i <= i + '1'; end if;					

 address2 <= resize(unsigned(address2), 5);									--address 2 is resized to 5 bit vector to give it as input to ROM module
 
 if write_enable = '1' then 
  i <= "00000";
  write_address <= write_address + '1';										--maintating counter of write address
  if reg_C (15 DOWNTO 15) = '1' then reg_C <= "00000000";							--discarding rightmost 7 bits and left
  else reg_C <= C (14 DOWNTO 7);end if;										--most 2 bits, then check if 9 bit vector holds
  address_in <= address1; 											--negative value, if yes write 0 else write remaining 8 bits to memory
 else address_in <= write_address;end if;

 g1 : RAM_64Kx8 port map(
  clock => clock;
  read_enable => read_enable;
  write_enable => write_enable;
  address => address_in;
  data_in => reg_C;
  reg_A => data_out
 );

 g2 : ROM_32x9 port map(
  clock => clock;
  read_enable => read_enable;
  address => address2;
  reg_B => data_out
 );
 
 reg_A <= resize(unsigned(reg_A), 18);
 reg_B <= resize(unsigned(reg_B), 18);
 g3 : MAC port map(
  clock => clock;
  control => control;
  data_in1 => reg_A;
  data_in2 => reg_B;
  reg_C => data_out
 );
end if
end process
end behavior;